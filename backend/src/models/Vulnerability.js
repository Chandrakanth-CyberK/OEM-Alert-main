const mongoose = require('mongoose');

const vulnerabilitySchema = new mongoose.Schema({
  cveId: {
    type: String,
    required: [true, 'CVE ID is required'],
    unique: true,
    match: [/^CVE-\d{4}-\d{4,}$/, 'Invalid CVE ID format']
  },
  title: {
    type: String,
    required: [true, 'Title is required'],
    trim: true
  },
  description: {
    type: String,
    required: [true, 'Description is required']
  },
  severity: {
    type: String,
    required: [true, 'Severity is required'],
    enum: ['critical', 'high', 'medium', 'low']
  },
  cvssScore: {
    type: Number,
    required: [true, 'CVSS score is required'],
    min: [0, 'CVSS score cannot be negative'],
    max: [10, 'CVSS score cannot exceed 10']
  },
  cvssVector: {
    type: String
  },
  affectedDevices: [{
    deviceId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Device'
    },
    deviceName: String,
    manufacturer: String,
    model: String,
    versions: [String]
  }],
  oem: {
    type: String,
    required: [true, 'OEM is required']
  },
  department: {
    type: String,
    required: [true, 'Department is required'],
    enum: ['icu', 'emergency', 'surgery', 'radiology', 'laboratory', 'it', 'pharmacy', 'cardiology']
  },
  patientSafetyImpact: {
    type: String,
    required: [true, 'Patient safety impact is required'],
    enum: ['life-critical', 'high', 'medium', 'low', 'none']
  },
  hipaaRisk: {
    type: String,
    required: [true, 'HIPAA risk level is required'],
    enum: ['high', 'medium', 'low']
  },
  publishedDate: {
    type: Date,
    required: [true, 'Published date is required']
  },
  lastModifiedDate: {
    type: Date
  },
  discoveredDate: {
    type: Date,
    default: Date.now
  },
  status: {
    type: String,
    enum: ['new', 'acknowledged', 'in_progress', 'resolved', 'false_positive'],
    default: 'new'
  },
  remediation: {
    description: String,
    steps: [String],
    estimatedTime: String,
    priority: {
      type: String,
      enum: ['immediate', 'urgent', 'high', 'medium', 'low'],
      default: 'medium'
    }
  },
  references: [{
    type: String,
    match: [/^https?:\/\/.+/, 'Invalid URL format']
  }],
  tags: [String],
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  alertsSent: [{
    type: {
      type: String,
      enum: ['email', 'sms', 'dashboard']
    },
    sentAt: {
      type: Date,
      default: Date.now
    },
    recipients: [String],
    status: {
      type: String,
      enum: ['sent', 'failed', 'pending'],
      default: 'pending'
    }
  }],
  mitigationStatus: {
    isPatched: {
      type: Boolean,
      default: false
    },
    patchedDate: Date,
    workaroundImplemented: {
      type: Boolean,
      default: false
    },
    workaroundDescription: String,
    riskAccepted: {
      type: Boolean,
      default: false
    },
    riskAcceptanceReason: String,
    riskAcceptedBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    }
  }
}, {
  timestamps: true
});

// Indexes for performance
vulnerabilitySchema.index({ cveId: 1 });
vulnerabilitySchema.index({ severity: 1 });
vulnerabilitySchema.index({ department: 1 });
vulnerabilitySchema.index({ status: 1 });
vulnerabilitySchema.index({ publishedDate: -1 });
vulnerabilitySchema.index({ cvssScore: -1 });
vulnerabilitySchema.index({ patientSafetyImpact: 1 });

// Virtual for age in days
vulnerabilitySchema.virtual('ageInDays').get(function() {
  return Math.floor((Date.now() - this.discoveredDate) / (1000 * 60 * 60 * 24));
});

// Method to determine if vulnerability requires immediate attention
vulnerabilitySchema.methods.requiresImmediateAttention = function() {
  return this.severity === 'critical' || 
         this.patientSafetyImpact === 'life-critical' ||
         this.cvssScore >= 9.0;
};

module.exports = mongoose.model('Vulnerability', vulnerabilitySchema);