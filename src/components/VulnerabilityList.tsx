import React, { useState } from 'react';
import { Search, Filter, Download, Eye, AlertTriangle, Clock } from 'lucide-react';
import { useVulnerability } from '../context/VulnerabilityContext';

export const VulnerabilityList: React.FC = () => {
  const { vulnerabilities } = useVulnerability();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [selectedDepartment, setSelectedDepartment] = useState('all');

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const matchesSearch = vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.affectedDevice.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesSeverity = selectedSeverity === 'all' || vuln.severity === selectedSeverity;
    const matchesDepartment = selectedDepartment === 'all' || vuln.department === selectedDepartment;
    
    return matchesSearch && matchesSeverity && matchesDepartment;
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const getPatientImpactColor = (impact: string) => {
    switch (impact) {
      case 'life-critical': return 'text-red-600 dark:text-red-400';
      case 'high': return 'text-orange-600 dark:text-orange-400';
      case 'medium': return 'text-yellow-600 dark:text-yellow-400';
      case 'low': return 'text-green-600 dark:text-green-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Vulnerability Management</h1>
        <p className="text-gray-600 dark:text-gray-400">Monitor and manage security vulnerabilities across medical infrastructure</p>
      </div>

      {/* Filters */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div className="flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search CVE ID, device, or description..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg 
                           bg-white dark:bg-gray-700 text-gray-900 dark:text-white 
                           focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>

          <div className="flex space-x-3">
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value)}
              className="border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 
                         bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>

            <select
              value={selectedDepartment}
              onChange={(e) => setSelectedDepartment(e.target.value)}
              className="border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-2 
                         bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="all">All Departments</option>
              <option value="icu">ICU</option>
              <option value="emergency">Emergency</option>
              <option value="surgery">Surgery</option>
              <option value="radiology">Radiology</option>
              <option value="laboratory">Laboratory</option>
            </select>

            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              <Download className="h-4 w-4" />
              <span>Export</span>
            </button>
          </div>
        </div>
      </div>

      {/* Vulnerability Cards */}
      <div className="space-y-4">
        {filteredVulnerabilities.map((vulnerability) => (
          <div key={vulnerability.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-3">
                  <span className="text-lg font-bold text-blue-600 dark:text-blue-400">
                    {vulnerability.cveId}
                  </span>
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(vulnerability.severity)}`}>
                    {vulnerability.severity.toUpperCase()}
                  </span>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-400">
                    CVSS: {vulnerability.cvssScore}
                  </span>
                </div>

                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                  {vulnerability.affectedDevice} - {vulnerability.oem}
                </h3>

                <p className="text-gray-600 dark:text-gray-400 mb-4">
                  {vulnerability.description}
                </p>

                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-900 dark:text-white">Department:</span>
                    <p className="text-gray-600 dark:text-gray-400 capitalize">{vulnerability.department}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-900 dark:text-white">Patient Impact:</span>
                    <p className={`capitalize font-medium ${getPatientImpactColor(vulnerability.patientSafetyImpact)}`}>
                      {vulnerability.patientSafetyImpact}
                    </p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-900 dark:text-white">HIPAA Risk:</span>
                    <p className="text-gray-600 dark:text-gray-400 capitalize">{vulnerability.hipaaRisk}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-900 dark:text-white">Published:</span>
                    <p className="text-gray-600 dark:text-gray-400">
                      {new Date(vulnerability.publishedDate).toLocaleDateString()}
                    </p>
                  </div>
                </div>
              </div>

              <div className="flex items-center space-x-2 ml-4">
                {vulnerability.patientSafetyImpact === 'life-critical' && (
                  <AlertTriangle className="h-5 w-5 text-red-500" />
                )}
                <Clock className="h-4 w-4 text-gray-400" />
                <button className="flex items-center space-x-1 px-3 py-1 text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors">
                  <Eye className="h-4 w-4" />
                  <span>Details</span>
                </button>
              </div>
            </div>

            {vulnerability.remediation && (
              <div className="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                <h4 className="font-medium text-blue-900 dark:text-blue-300 mb-2">Remediation Guidance</h4>
                <p className="text-sm text-blue-800 dark:text-blue-400">{vulnerability.remediation}</p>
              </div>
            )}
          </div>
        ))}
      </div>

      {filteredVulnerabilities.length === 0 && (
        <div className="text-center py-12">
          <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">No vulnerabilities found</h3>
          <p className="text-gray-600 dark:text-gray-400">Try adjusting your search criteria or filters.</p>
        </div>
      )}
    </div>
  );
};